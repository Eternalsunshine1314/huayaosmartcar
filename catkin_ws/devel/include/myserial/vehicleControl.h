// Generated by gencpp from file myserial/vehicleControl.msg
// DO NOT EDIT!


#ifndef MYSERIAL_MESSAGE_VEHICLECONTROL_H
#define MYSERIAL_MESSAGE_VEHICLECONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace myserial
{
template <class ContainerAllocator>
struct vehicleControl_
{
  typedef vehicleControl_<ContainerAllocator> Type;

  vehicleControl_()
    : mode(0)
    , lidar(0)
    , gamePad_x(0)
    , gamePad_z(0)
    , visual_x(0)
    , visual_z(0)  {
    }
  vehicleControl_(const ContainerAllocator& _alloc)
    : mode(0)
    , lidar(0)
    , gamePad_x(0)
    , gamePad_z(0)
    , visual_x(0)
    , visual_z(0)  {
  (void)_alloc;
    }



   typedef int64_t _mode_type;
  _mode_type mode;

   typedef int64_t _lidar_type;
  _lidar_type lidar;

   typedef int64_t _gamePad_x_type;
  _gamePad_x_type gamePad_x;

   typedef int64_t _gamePad_z_type;
  _gamePad_z_type gamePad_z;

   typedef int64_t _visual_x_type;
  _visual_x_type visual_x;

   typedef int64_t _visual_z_type;
  _visual_z_type visual_z;




  typedef boost::shared_ptr< ::myserial::vehicleControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::myserial::vehicleControl_<ContainerAllocator> const> ConstPtr;

}; // struct vehicleControl_

typedef ::myserial::vehicleControl_<std::allocator<void> > vehicleControl;

typedef boost::shared_ptr< ::myserial::vehicleControl > vehicleControlPtr;
typedef boost::shared_ptr< ::myserial::vehicleControl const> vehicleControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::myserial::vehicleControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::myserial::vehicleControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace myserial

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'myserial': ['/home/huayao/catkin_ws/src/myserial/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::myserial::vehicleControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::myserial::vehicleControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::myserial::vehicleControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::myserial::vehicleControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::myserial::vehicleControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::myserial::vehicleControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::myserial::vehicleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b93a3ac7d139c45be24cc985db5ca1b";
  }

  static const char* value(const ::myserial::vehicleControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b93a3ac7d139c45ULL;
  static const uint64_t static_value2 = 0xbe24cc985db5ca1bULL;
};

template<class ContainerAllocator>
struct DataType< ::myserial::vehicleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "myserial/vehicleControl";
  }

  static const char* value(const ::myserial::vehicleControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::myserial::vehicleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 mode\n\
int64 lidar\n\
int64 gamePad_x\n\
int64 gamePad_z\n\
int64 visual_x\n\
int64 visual_z  \n\
\n\
\n\
";
  }

  static const char* value(const ::myserial::vehicleControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::myserial::vehicleControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.lidar);
      stream.next(m.gamePad_x);
      stream.next(m.gamePad_z);
      stream.next(m.visual_x);
      stream.next(m.visual_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vehicleControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::myserial::vehicleControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::myserial::vehicleControl_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.mode);
    s << indent << "lidar: ";
    Printer<int64_t>::stream(s, indent + "  ", v.lidar);
    s << indent << "gamePad_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gamePad_x);
    s << indent << "gamePad_z: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gamePad_z);
    s << indent << "visual_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.visual_x);
    s << indent << "visual_z: ";
    Printer<int64_t>::stream(s, indent + "  ", v.visual_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MYSERIAL_MESSAGE_VEHICLECONTROL_H
